text(-1.96, -0.02, expression(-z[over(alpha, 2)]), cex=0.8)
text(1.96, -0.02, expression(z[over(alpha, 2)]), cex=0.8)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
plot(y, type="n", xlab="표본추출", ylab="z", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
head(smps)
head(xbar)
z
ll <- xbar - z * se
ul <- xbar + z * se
ll; ul
head(ll); head(ul)
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t(smp)
ci.t(smp, 0.1)
str(mpg)
library(dplyr)
str(mpg)
?mpg
??mpg
library(ggplot2)
str(mpg)
table(mpg$class)
table(mpg$fl)
table(mpg$cyl)
str(mpg)
table(mpg$drv)
m <- mpg %>% filter(drv %in% c("f", "r"))
table(m$drv)
table(m$class)
mm <- m %>% filter(class == "midsize")
table(mm$drv)
mm <- m %>% filter(class == "compact")
table(mm$drv)
mm <- m %>% filter(class == "subcompact")
table(mm$drv)
str(mtcars)
str(iris)
head(state.x77)
states <- as.data.frame(state.x77[,c("Murder","Population","Illiteracy","Income","Frost")])
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data=states)
install.packages("car")
library(car)
vif(fit)
sqrt(vif(fit))
# 이상 관측치
influencePlot(fit, id.method = "identify")
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit1 <- lm(Murder ~ ., data=states)
summary(fit1)
fit2 <- lm(Murder ~ Population+Illiteracy, data=states)
summary(fit2)
# AIC
AIC(fit1, fit2)
f <- c(150, 160, 170, 180, 190)
s <- c(176, 179, 182, 178, 185)
fit <- lm(s~f)
summary(fit)
plot(s, f)
plot(f, s)
abline(fit)
abline(fit, col="red", lwd=2)
s <- c(176, 179, 182, 182, 185)
plot(f, s)
fit <- lm(s~f)
fit <- lm(s~f)
summary(fit)
abline(fit, col="red", lwd=2)
s <- c(176, 179, 182, 181, 185)
plot(f, s)
fit <- lm(s~f)
summary(fit)
abline(fit, col="red", lwd=2)
f <- c(100, 200, 300, 400, 500)
s <- c(30, 57, 76, 140, 197)
plot(f, s)
fit <- lm(s~f)
summary(fit)
abline(fit, col="red", lwd=2)
s <- c(30, 60, 76, 140, 197)
plot(f, s)
fit <- lm(s~f)
summary(fit)
abline(fit, col="red", lwd=2)
s <- c(30, 70, 85, 140, 197)
plot(f, s)
fit <- lm(s~f)
summary(fit)
abline(fit, col="red", lwd=2)
mtcars
plot(disp~hp, data=mtcars)
plot(hp~disp, data=mtcars)
fit <- lm(hp~disp, data=mtcars)
summary(fit)
abline(fit, col="red", lwd=2)
par(mfrow=c(2,2))
plot(fit)
Sys.Date()
Sys.Time()
Sys.time()
date()
as.Date('2014-11-01')
as.Date("2014/11/01")
as.Date("01-11-2014")
as.Date("01-11-2014",format="%d-%m-%Y")
as.Date("01-11-2014",format="%d년 %m월 %Y일")
as.Date("2014년 11월 1일",format="%Y년 %m월  %d일")
as.Date(10,origin="2014-11-10")
as.Date("2014-11-30") - as.Date("2014-11-01")
as.POSIXct("2014-11-01 20:00:00") - as.POSIXct("2014-11-01 18:30:30")
install.packages("lubridate")
library(lubridate)
date <- now( )
date
month(date,label=T)
month(date,label=F)
month(date,label=T)
day(date)
wday(date,label=T)
wday(date,label=F)
var4 <- c("a","b","c")
class(var4)
12->var1
var1
string1 <- "Very Easy R Programming"
class(string1)
comp <- c(1,"2")
class(comp)
comp
seq1 <- 1:5
seq1
date1 <- seq(from=as.Date('2014-01-01'),to=as.Date('2014-01-31'),by=1)
date1
objects()
rm(list=ls( ))
objects()
c(1,2,3,4,"5")
vec1<-c(1,2,3,4,"5")
vec1[3]
vec1[-3]
vec1[1:(length(vec1)-2)]
vec1[-1:-3]
vec1[9] <- 9
vec1
append(vec1,10,after=3)
append(vec1,11,after=0)
c(1,2,3) + c(4,5,6)
(10,20,30)
fruits <- c(10,20,30)
names(fruits) <- c('apple','banana','peach')
fruits
var5 <- seq(1,5) ; var5
var7 <- seq(1,10,2) ; var7
var8 <- rep(1:3,2) ; var8
3 %in% var7
4 %in% var7
date4 <- seq(from=as.Date('2015-01-01'),to=as.Date('2015-01-31'),by=1);date4
mat1 <- matrix(c(1,2,3,4))
mat1
mat2 <- matrix(c(1,2,3,4),nrow=2); mat2
mat3 <- matrix(c(1,2,3,4),nrow=2,byrow=T);mat3
,7,8,9),nrow=3,byrow=T);mat4
mat4 <- matrix(c(1,2,3
,4,5,6
,7,8,9),nrow=3,byrow=T);mat4
mat4 <- rbind(mat4,c(11,12,13)) ;mat4
array1 <- array(c(1:12), dim=c(4,3))
array1
array2 <- array(c(1:12), dim=c(2,2,3))  ;array2
list1 <- list(name='James Seo' ,address='Seoul' ,tel='010-8706-4712',pay=500);list1
list1[1:2]
list1$birth  <- '1975-10-23'
list1
class(list1$birth)
list1$birth  <- as.Date('1975-10-23')
class(list1$birth)
list1$name <- c('Seojinsu','James Seo')
list1$name
no <- c(1,2,3,4)
name <- c('Apple','Peach','Banana','Grape')
price <- c(500,200,100,50)
qty <- c(5,2,4,7)
sales <- data.frame(NO=no,NAME=name,PRICE=price,QTY=qty)
sales
sales2 <- matrix(c(1,'Apple',500,5,
2,'Peach',200,2,
3,'Banana',100,4,
4,'Grape',50,7),nrow=4,byrow=T)
sales2
df1 <- data.frame(sales2)
df1
df1 <- data.frame(sales2)
df1
names(df1) <- c('NO','NAME','PRICE','QTY')
df1
subset(df1,qty<5)
no <- c(1,2,3,4,5)
name <- c("서진수","주시현","최경우","이동근","윤정웅")
address <- c("서울","대전","포항","경주","경기")
tel <- c(1111,2222,3333,4444,5555)
hobby <- c("독서","미술","놀고먹기","먹고놀기","노는애감시하기")
member <- data.frame(NO=no,NAME=name,ADDRESS=address,TEL=tel,HOBBY=hobby)
member
subset(member,select=c(NO,NAME,TEL))
subset(member,select= -TEL)
member3<-subset(member,select= -TEL)
colnames(member3) <- c("번호","이름","주소","취미")
member3
member
ncol(member)
View(member)
nrow(member)
names(member)
rownames(member)
colnames(member)
member[c(1,2,3,4,5)]
member[c(1,2,3,4,5),]
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage5_GoogleChart')
# 예제 5-1. WorldBank 자료로 움직이는 버블챠트 생성하기
library(googleVis)
# 예제 5-8. Googlemap으로 제주도 여행지 위치 색다르게 보기
library(ggmap)        # Google API Key 필요
# 예제 5-20. 웹에서 다운로드 받은 자료를 그래프로 출력하기
install.packages("httr")
install.packages("httr")
install.packages("XML")
library(XML)
library(googleVis)
library(httr)
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
page <- GET(
"https://en.wikipedia.org/",
path="wiki/World_population",
config(cainfo = cafile))
x <- content(page, as ='text')
str(x)
tab <- sub('.*(<table class="grid".*?>.*</table>).*', '\\1', x)
pop_table
pop_table <- readHTMLTable(tab)
pop_table
str(pop_table)
str(pop_table); length(pop_table)
pop_table <- readHTMLTable(tab,which=1)  # 1번째 테이블입니다.
str(pop_table); length(pop_table)
#==============================================================
str(pop_table[c(1:28),])
pop_table <- readHTMLTable(tab)
pop_table[c(1:28),]
dat <- data.frame(Term=c("1","2","3"),
President=c("Whasington", "Adams", "Jefferson"),
start=as.Date(x=c("1789-03-29", "1797-02-03", "1801-02-03")),
end=as.Date(x=c("1797-02-03", "1801-02-03", "1809-02-03")))
tl <- gvisTimeline(data=dat[,-1], rowlabel="President",
+ start="start", end="end")
tl <- gvisTimeline(data=dat[,-1], rowlabel="President",
start="start", end="end")
tl <- gvisTimeline(data=dat, barlabel="President",
start="start", end="end")
plot(tl)
dat <- data.frame(Room=c("Class 1","Class 2","Class 3"),
Language=c("English Team", "German Team", "French Team"),
start=as.POSIXct(c("2015-09-14 14:00", "2015-09-14 15:00",
"2015-09-14 14:30")),
end=as.POSIXct(c("2015-09-14 15:00", "2015-09-14 16:00",
"2015-09-14 15:30")))
tl <- gvisTimeline(data=dat, rowlabel="Rev_Team",
start="start", end="end")
plot(tl)
# 예제 5-22. gvisScatterChart 사용하기
txt1 <- gvisScatterChart(women)
plot(txt1)
txt2 <- gvisScatterChart(women, options=list(legend="none",
lineWidth="3", pointSize="3",
title="Women", vAxis="{title:'weight (lbs)'}",
crosshair="{ trigger: 'both' }",
hAxis="{title:'height (in)'}", width=800, height=600))
plot(txt2)
# 포인터 모양 변경하기
mtx <- matrix(nrow=6,ncol=6)
mtx[col(mtx)==row(mtx)] <- 1:6
dat <- data.frame(X=1:6, mtx)
SC <- gvisScatterChart(dat,
options=list(title="Customizing points",
legend="right",
pointSize=30,
series="{
0: { pointShape: 'circle' },
1: { pointShape: 'triangle' },
2: { pointShape: 'square' },
3: { pointShape: 'diamond' },
4: { pointShape: 'star' },
5: { pointShape: 'polygon' }
}",width=800, height=400))
plot(SC)
# 예제 5-23. Treemap 사용하기 – gvisTreemap( )
tm <- gvisTreeMap(Regions, idvar="Region", parentvar="Parent",
sizevar="Val", colorvar="Fac")
plot(tm)
# 색상을 다르게 설정하기
tm2 <- gvisTreeMap(Regions, "Region", "Parent", "Val", "Fac",
options=list(width=600, height=500,
fontSize=13,
minColor='#EDF8FB',
midColor='#66C2A4',
maxColor='#006D2C',
headerHeight=20,
fontColor='black',
showScale=TRUE))
plot(tm2)
# 미국 전체 주를 Treemap 으로 표시하기
require(datasets)
states <- data.frame(state.name, state.area)
total=data.frame(state.area=sum(states$state.area), state.name="USA")
my.states <- rbind(total, states)
my.states$parent="USA"
my.states$parent[my.states$state.name=="USA"] <- NA
my.states$state.area.log=log(my.states$state.area)
statesTree <- gvisTreeMap(my.states, "state.name", "parent",
"state.area", "state.area.log")
plot(statesTree)
# 예제 5-24. 여러 개의 Google Chart 합치기 – gvisMerge( )
Pie1 <- gvisPieChart(CityPopularity)
Pie2 <- gvisPieChart(CityPopularity, options=list(
slices="{4: {offset: '0.2'}, 0: {offset: '0.3'}}",
title="City popularity",
legend="none",
pieSliceText="label",
pieHole="0.5",width=600))
plot(gvisMerge(Pie2, Pie1, tableOptions = "cellspacing=\"20\" bgcolor=\"#AABBCC\"",
+ horizontal=TRUE))
plot(gvisMerge(Pie2, Pie1, tableOptions = "cellspacing=\"20\" bgcolor=\"#AABBCC\"",
horizontal=TRUE))
Geo <- gvisGeoChart(Exports, "Country", "Profit",
options=list(width=250, height=100))
Tble <- gvisTable(Exports,
options=list(width=250, height=300))
GT <- gvisMerge(Geo,Tbl, horizontal=FALSE)
Tbl <- gvisTable(Exports,
options=list(width=250, height=300))
GT <- gvisMerge(Geo,Tbl, horizontal=FALSE)
plot(GT)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=400, height=410))
GTM <- gvisMerge(GT, M, horizontal=TRUE,
tableOptions="cellspacing=10")
plot(GTM)
line <- gvisLineChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend="none", width=300, height=150))
column <- gvisColumnChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend="none", width=300, height=150))
area <- gvisAreaChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend="none", width=300, height=150))
bar <- gvisBarChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend="none", width=300, height=150))
lcab <- gvisMerge(gvisMerge(line, column), gvisMerge(area, bar),
horizontal=TRUE, tableOptions="bgcolor=\"#AABBCC\"")
plot(lcab)
# 예제 5-25. Sankey Chart 로 표현하기
data1 <- read.csv("rchart연습.csv")
data1
plot(gvisSankey(data1, from="항목", + to="목적지", weight="크기",
options=list(
height=550, width=800,\
sankey="{link:{color:{fill:'lightblue'}}}"
))
)
require(googleVis)
plot(gvisSankey(data1, from="항목", + to="목적지", weight="크기",
options=list(
height=550, width=800,\
sankey="{link:{color:{fill:'lightblue'}}}"
))
)
# 예제 5-25. Sankey Chart 로 표현하기
install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
library(devtools)
install_github("mages/googleVis")
require(googleVis)
plot(gvisSankey(data1, from="항목", + to="목적지", weight="크기",
options=list(
height=550, width=800,\
sankey="{link:{color:{fill:'lightblue'}}}"
))
)
data1 <- read.csv("rchart연습.csv")
data1
require(googleVis)
plot(gvisSankey(data1, from="항목", + to="목적지", weight="크기",
options=list(
height=550, width=800,\
sankey="{link:{color:{fill:'lightblue'}}}"
))
)
plot(gvisSankey(data1, from="항목", to="목적지", weight="크기",
options=list(
height=550, width=800,\
sankey="{link:{color:{fill:'lightblue'}}}"
))
)
plot(gvisSankey(data1, from="항목", to="목적지", weight="크기",
options=list(
height=550, width=800,
sankey="{link:{color:{fill:'lightblue'}}}"
))
)
header <- data1.html.head
header <- data1.html.header
san <- gvisSankey(data1, from="항목", to="목적지", weight="크기",
options=list(height=550, width=800,
sankey="{link:{color:{fill:'lightblue'}}}"
))
header <- san.html.head
header <- san.html.header
plot(san)
header <- san$html$header
header <- gsub('charset=utf-8', 'charset=euc-kr', header)
san$html$header <- header
plot(san)
# 경상남도 2015년 예산 표현하기
data1 <- read.csv("경상남도_2015_예산.csv")
data1
san <- plot( gvisSankey(data1, from="총예산", to="세부지출", weight="예산",
)
)
# 경상남도 2015년 예산 표현하기
data1 <- read.csv("경상남도_2015_예산.csv")
data1
san <- plot(gvisSankey(data1, from="총예산", to="세부지출", weight="예산",
options=list(height=550, width=800,
sankey="{link:{color:{fill:'lightblue'}}}" ))))
san <- plot(gvisSankey(data1, from="총예산", to="세부지출", weight="예산",
options=list(height=550, width=800,
sankey="{link:{color:{fill:'lightblue'}}}" )))
san <- gvisSankey(data1, from="총예산", to="세부지출", weight="예산",
options=list(height=550, width=800,
sankey="{link:{color:{fill:'lightblue'}}}" ))
header <- san$html$header
header <- gsub('charset=utf-8', 'charset=euc-kr', header)
san$html$header <- header
plot(san)
# 영화 배우와 출연 작품 표현
data1 <- read.csv("영화배우와_출연작품.csv")
data1
san <- gvisSankey(data1, from="배우명", to="영화명", weight="관객수",
options=list(height=550, width=800,
sankey="{link:{color:{fill:'lightblue'}}}" ))
header <- san$html$header
header <- gsub('charset=utf-8', 'charset=euc-kr', header)
san$html$header <- header
plot(san)
install.packages('rvest')
library(rvest)
# 내가 수집하길 원하는 페이지 주소
url <- "http://www.bobaedream.co.kr/cyber/CyberCar.php?gubun=K&page=1"
usedCar <- read_html(url)    # 해당 url 페이지의 html tag를 가져와서 parsing함.
usedCar
# parsing한 usedCar 에서 css가 'carinfo' 인 것을 찾아라.
carInfos <- html_nodes(usedCar, css='.carinfo')
head(carInfos)
# parsing한 usedCar 에서 css가 'carinfo' 인 것을 찾아라.
# carInfos <- html_nodes(usedCar, css='.carinfo')
carInfos <- html_nodes(usedCar, className='list-inner')
# parsing한 usedCar 에서 css가 'carinfo' 인 것을 찾아라.
# carInfos <- html_nodes(usedCar, css='.carinfo')
carInfos <- html_nodes(usedCar, class='list-inner')
# parsing한 usedCar 에서 css가 'carinfo' 인 것을 찾아라.
# carInfos <- html_nodes(usedCar, css='.carinfo')
carInfos <- html_nodes(usedCar, css='.list-inner')
head(carInfos)
length(carInfos)
library(dplyr)
carInfos[1]
carInfos[1] %>%
html_node('.mode-cell title') %>%
htmpParse()
carInfos[1] %>%
html_node('.mode-cell title')
carInfos[1] %>%
html_nodes(css='.mode-cell title')
ci <- gsub('\r\n', '', carInfos[1])
ci <- gsub('\t', '', carInfos[1])
ci
ci <- gsub('\t', '', ci)
ci
?gsub()
