labs(title = "dataset 4")
p4
grid.arrange(p1, p2, p3, p4, ncol=2, top = "Anscombe's Quartet")
p1 <- ggplot(anscombe) +
geom_point(aes(x1, y1), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(2, 20, 2)) +
xlim(c(2,20)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
ylim(c(2,14)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
#expand_limits(x = 0, y = 0) +
labs(title = "dataset 1")
p1
p2 <- ggplot(anscombe) +
geom_point(aes(x2, y2), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(2, 20, 2)) +
xlim(c(2,20)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
ylim(c(2,14)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
#expand_limits(x = 0, y = 0) +
labs(title = "dataset 2")
p2
p3 <- ggplot(anscombe) +
geom_point(aes(x3, y3), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(2, 20, 2)) +
xlim(c(2,20)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
ylim(c(2,14)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
#expand_limits(x = 0, y = 0) +
labs(title = "dataset 3")
p3
p4 <- ggplot(anscombe) +
geom_point(aes(x4, y4), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(2, 20, 2)) +
xlim(c(2,20)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
ylim(c(2,14)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
#expand_limits(x = 0, y = 0) +
labs(title = "dataset 4")
p4
grid.arrange(p1, p2, p3, p4, ncol=2, top = "Anscombe's Quartet")
p4 <- ggplot(anscombe) +
geom_point(aes(x4, y4), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(2, 20, 2)) +
#xlim(c(2,20)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
#ylim(c(2,14)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
#expand_limits(x = 0, y = 0) +
labs(title = "dataset 4")
p4
p4 <- ggplot(anscombe) +
geom_point(aes(x4, y4), color = "darkorange", size = 3) +
theme_bw() +
scale_x_continuous(breaks = seq(2, 20, 2)) +
xlim(c(2,20)) +
scale_y_continuous(breaks = seq(2, 14, 2)) +
ylim(c(2,14)) +
geom_abline(intercept = 3, slope = 0.5,
color = "cornflowerblue") +
#expand_limits(x = 0, y = 0) +
labs(title = "dataset 4")
p4
grid.arrange(p1, p2, p3, p4, ncol=2, top = "Anscombe's Quartet")
midwest
mw <- midwest %>%
filter(poptotal <= 500000 and popasian <= 10000)
library(dplyr)
midwest
mw <- midwest %>%
filter(poptotal <= 500000 and popasian <= 10000)
mw <- midwest %>%
filter(poptotal <= 500000 && popasian <= 10000)
ggplot(mw, aes(x=mw$poptotal, y=mw$popasian)) +
geom_point()
ggplot(mw, aes(x=mw$poptotal, y=mw$popasian)) +
geom_point() +
xlim(c(0,500000)) + ylim(c(0,10000))
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(c(0,500000)) + ylim(c(0,10000))
options(scipen = 99)
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(c(0,500000)) + ylim(c(0,10000))
options(scipen = 100)
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(c(0,500000)) + ylim(c(0,10000))
options(scipen = 10)
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(c(0,500000)) + ylim(c(0,10000))
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
suv <- mpg %>%
filter(class == 'suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
suv
suv <- mpg %>%
filter(class == 'suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
suv
ggplot(df_suv, aes(x=manufacture, y=mean_cty)) +
geom_bar()
df_suv <- mpg %>%
filter(class == 'suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(df_suv, aes(x=manufacture, y=mean_cty)) +
geom_bar()
df_suv
ggplot(df_suv, aes(x=manufacturer, y=mean_cty)) +
geom_bar()
ggplot(df_suv, aes(x=manufacturer)) +
geom_bar()
ggplot(df_suv, aes(x=manufacturer, y=mean_cty)) +
geom_bar()
ggplot(df_suv, aes(x=manufacturer, y=mean_cty)) +
geom_col()
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty)) +
geom_col()
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty,
fill=manufacturer)) +
geom_col()
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty
)) +
geom_col(color=factor(manufacturer))
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty
)) +
geom_col(color=factor(manufacturer))
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty,
fill=manufacturer)) +
geom_col()
df_class <- mpg %>%
group_by(class) %>%
summarise(count = n())
df_class
ggplot(df_class, aes(x=class)) +
geom_bar()
ggplot(df_class, aes(x=class, y=count)) +
geom_bar()
ggplot(df_class, aes(x=class, y=count)) +
geom_col()
ggplot(df_class, aes(x=class, y=count, fill=class)) +
geom_col()
ggplot(mpg, aes(x=class)) +
geom_bar()
ggplot(mpg, aes(x=class, fill=class)) +
geom_bar()
economics
ggplot(data = economics, aes(x = date, y = psavert)) +
geom_line()
df_3class <- mpg %>%
filter(class %in% c("compact", "subcompact", "suv"))
df_3class
ggplot(df_3class, aes(x=class, y=cty)) +
geom_boxplot()
ggplot(df_3class, aes(x=class, y=cty, fill=class)) +
geom_boxplot()
diamonds
str(diamonds)
ggplot(diamonds, aes(x=cut)) +
geom_bar()
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=cut, y=price, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=price)) +
geom_histogram()
ggplot(diamonds, aes(x=price)) +
geom_histogram() +
facet_wrap(~cut)
ggplot(diamonds, aes(x=cut)) +
geom_histogram() +
facet_wrap(~price)
df_price <- diamonds %>%
group_by(cut) %>%
summarise(mean_price = mean(price))
ggplot(df_price, aes(x=cut, y=price)) +
geom_col()
ggplot(df_price, aes(x=cut, y=mean_price)) +
geom_col()
ggplot(df_price, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
df_color <- diamonds %>%
group_by(color) %>%
summarise(mean_price = mean(price))
ggplot(df_color, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
ggplot(df_color, aes(x=cut, y=mean_price, fill=color)) +
geom_col()
()
()
ggplot(df_color, aes(x=cut, y=mean_price, fill=color)) +
geom_col()
ggplot(df_color, aes(x=color, y=mean_price, fill=color)) +
geom_col()
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(1, 2))
ggplot(diamonds, aes(x=price)) +
geom_histogram() +
facet_wrap(~cut + color)
ggplot(diamonds, aes(x=price)) +
geom_histogram(bins=10) +
facet_wrap(~cut + color)
diamonds %>%
group_by(cut+color) %>%
summarise(mean_price = mean(price))
diamonds %>%
group_by(cut,color) %>%
summarise(mean_price = mean(price))
ggplot(df_cut_color, aes(x=cut+color, y=mean_price)) +
geom_col()
df_cut_color <- diamonds %>%
group_by(cut, color) %>%
summarise(mean_price = mean(price))
ggplot(df_cut_color, aes(x=cut+color, y=mean_price)) +
geom_col()
ggplot(df_cut_color, aes(x=cut~color, y=mean_price)) +
geom_col()
df_cut_ideal <- diamonds %>%
group_by(cut) %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_ideal
ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_bar()
ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col()
ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal')
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(family="D2Coding", face="bold", size=30, vjust=2, color="red"))
g_ideal
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(family="D2Coding", face="bold", size=20, vjust=2, color="red"))
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(family="Malgun", face="bold", size=20, vjust=2, color="red"))
g_ideal
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(family="MalgunGothic", face="bold", size=20, vjust=2, color="red"))
g_ideal
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(face="bold", size=20, vjust=2, color="red"))
g_ideal
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
g_ideal
df_cut_fair <- diamonds %>%
select(cut == 'fair') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_fair <- diamonds %>%
filter(cut == 'fair') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_fair
df_cut_fair <- diamonds %>%
filter(cut == 'fair') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_fair <- diamonds %>%
filter(cut == 'Fair') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_fair
g_fair <- ggplot(df_cut_fair, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Fair') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
df_cut_vg <- diamonds %>%
filter(cut == 'Very Good') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_vg
df_cut_fair <- diamonds %>%
filter(cut == 'Fair') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_fair
g_fair <- ggplot(df_cut_fair, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Fair') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
df_cut_good <- diamonds %>%
filter(cut == 'Good') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_good
g_good <- ggplot(df_cut_good, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Good') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
df_cut_vg <- diamonds %>%
filter(cut == 'Very Good') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_vg
g_vg <- ggplot(df_cut_vg, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Very Good') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
df_cut_premium <- diamonds %>%
filter(cut == 'Premium') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_premium
g_premium <- ggplot(df_cut_premium, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Premium') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
df_cut_ideal <- diamonds %>%
filter(cut == 'Ideal') %>%
group_by(color) %>%
summarise(mean_price=mean(price))
df_cut_ideal
g_ideal <- ggplot(df_cut_ideal, aes(x=color, y=mean_price, fill=color)) +
geom_col() +
ggtitle('Cut = Ideal') +
theme(plot.title=element_text(face="bold", size=20, vjust=1, color="red"))
grid.arrange(g_fair, g_good, g_vg, g_premium, g_ideal, ncol=3,
top = 'Cut과 Color에 따른 가격 변화')
grid.arrange(g_fair, g_good, g_vg, g_premium, g_ideal, ncol=3,
top = 'Cut과 Color에 따른 가격 변화')
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage3_StructuredData/M37_Mapo09Bus')
library(ggplot2)
library(dplyr)
library(reshape2)
library(extrafont)
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
bus09 <- read.csv('마포09번이용현황.csv')
# Wide 형태
length(bus09$승차인원)
bus09$number <- c(1:length(bus09$승차인원))
stop <- bus09$정류소명
ggplot(bus09, aes(x=정류소명)) +
geom_point(color='orange', aes(x=number, y=승차인원)) +
geom_line(color='orange', aes(x=number, y=승차인원)) +
geom_point(color='blue', aes(x=number, y=하차인원)) +
geom_line(color='blue', aes(x=number, y=하차인원)) +
labs(x='정류소명', y='승하차 인원 (단위: 천명)') +
scale_x_continuous(breaks = 1:32, labels = stop) +
theme(axis.text.x=element_text(angle=45, hjust=1, vjust=1,
colour="black", size=8)) +
scale_y_continuous(breaks = seq(0,40000,10000), labels = c(0,10,20,30,40)) +
ggtitle('마포09번 정류소별 승하차 인원') +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue")) +
geom_hline(yintercept=seq(0, 40000, 10000),
color='grey', linetype = 'dashed', size=0.1) +
geom_vline(xintercept=seq(0, 30, 5),
color='grey', linetype = 'dashed', size=0.1)
# Long 형태
bus09$정류소명 <- paste(1:length(bus09$정류소명),'.',bus09$정류소명, sep='')
bus09$정류소명 <- factor(bus09$정류소명, levels=unique(bus09$정류소명))
mBus <- melt(bus09, id=c('정류소명'),
variable.name='구분', value.name='인원')
mBus <- mBus %>%
filter(구분 %in% c('승차인원', '하차인원'))
mBus
ggplot(mBus, aes(x=정류소명, y=인원, color=구분, group=구분)) +
geom_point(size=3) +
geom_line(size=1) +
labs(x='정류소명', y='승하차 인원 (단위: 천명)') +
theme(axis.text.x=element_text(angle=45, hjust=1, vjust=1,
colour="black", size=8)) +
scale_y_continuous(breaks = seq(0,40000,10000), labels = c(0,10,20,30,40)) +
ggtitle('마포09번 정류소별 승하차 인원') +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue")) +
geom_hline(yintercept=seq(0, 40000, 10000),
color='grey', linetype = 'dashed', size=0.1) +
geom_vline(xintercept=seq(0, 30, 5),
color='grey', linetype = 'dashed', size=0.1)
install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
head(USArrests)
tail(USArrests)
summary(USArrests)
describe(USArrests)
library(tibble)
head(USArrests)
crime <- rownames_to_column(USArrests, var = "state")
head(crime)
crime$state <- tolower(crime$state)
head(crime)
# 미국 주 지도 데이터 준비하기
states_map <- map_data("state")
str(states_map)
# 미국 주 지도 데이터 준비하기
states_map <- map_data("state")
str(states_map)
library(ggplot2)
# 미국 주 지도 데이터 준비하기
states_map <- map_data("state")
install.packages('map_data')
install.packages('maps')
# 미국 주 지도 데이터 준비하기
states_map <- map_data("state")
str(states_map)
# 단계 구분도 만들기
ggChoropleth(data = crime,         # 지도에 표현할 데이터
aes(fill = Murder,    # 색깔로 표현할 변수
map_id = state),  # 지역 기준 변수
map = states_map)     # 지도 데이터
install.packages('mapproj')
library(mapproj)
# 단계 구분도 만들기
ggChoropleth(data = crime,         # 지도에 표현할 데이터
aes(fill = Murder,    # 색깔로 표현할 변수
map_id = state),  # 지역 기준 변수
map = states_map)     # 지도 데이터
# 인터랙티브 단계 구분도 만들기
ggChoropleth(data = crime,         # 지도에 표현할 데이터
aes(fill = Rape,      # 색깔로 표현할 변수
map_id = state),  # 지역 기준 변수
map = states_map,     # 지도 데이터
interactive = T)      # 인터랙티브
ggChoropleth(data = crime,
aes(fill = Murder, map_id = state),
map = states_map) +
ggtitle("미국 주별 살인범죄 분포","(단위: 인구 10만명당 건수)") +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue"),
plot.subtitle = element_text(hjust = 1.0))
library(gridExtra)
m <-ggChoropleth(data = crime,
aes(fill = Murder, map_id = state),
map = states_map) +
ggtitle("미국 주별 살인범죄 분포","(단위: 인구 10만명당 건수)") +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue"),
plot.subtitle = element_text(hjust = 1.0))
r <- ggChoropleth(data = crime,
aes(fill = Rape, map_id = state),
map = states_map) +
ggtitle("미국 주별 강간범죄 분포","(단위: 인구 10만명당 건수)") +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue"),
plot.subtitle = element_text(hjust = 1.0))
a <- ggChoropleth(data = crime,
aes(fill = Assault, map_id = state),
map = states_map) +
ggtitle("미국 주별 강도범죄 분포","(단위: 인구 10만명당 건수)") +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue"),
plot.subtitle = element_text(hjust = 1.0))
u <- ggChoropleth(data = crime,
aes(fill = UrbanPop, map_id = state),
map = states_map) +
ggtitle("미국 주별 도시비율 분포") +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "darkblue"))
windows()
grid.arrange(m, r, a, u, ncol=2)
grid.arrange(m, r, a, u, ncol=2)
grid.arrange(m, r, a, u, ncol=2,
top = '미국 주별 강력범죄 분포')
# 대한민국 시도별 인구 단계 구분도 만들기
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
