Fruits
library(googleVis)
Fruits
fruit
aggregate(Sales~Year,Fruits,sum)
aggregate(Sales~Year,Fruits,max)
aggregate(Sales~Year,Fruits,min)
aggregate(Sales~Year,Fruits,mean)
aggregate(Sales~Fruit, Fruits, sum)
aggregate(Sales~Fruit, Fruits, max)
aggregate(Sales~Fruit+Year, Fruits, max)
aggregate(Sales~Year+Fruit, Fruits, max)
mat1 <- matrix(c(1:6), nrow=2, byrow=T); mat1
apply(mat1,1,sum) # 1 - 행 단위 계산
apply(mat1,2,sum) # 2- 열 단위 계산
apply(mat1,1,prod) # 곱하기
apply(mat1[,c(2,3)],1,sum)
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
class(lapply)
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
lapply(Fruits[,c(4,5)], max)
sapply(Fruits[,c(4,5)], max)
tapply(Sales, Fruit, sum)
tapply(Sales, Fruits, sum)
attach(Fruits)
tapply(Sales, Fruit, sum)
tapply(Sales, Year, sum)
vec1 <- c(1:5)
vec2 <- seq(10,50,10)
vec3 <- seq(100, 500, 100)
mapply(sum,vec1,vec2,vec3)
data1 <- read.csv('data1.csv')
data1
View(data1)
View(data1)
apply(data1[,c(2:15)],2,sum) #년도별 합계
apply(data1[,-1],1,sum) #연령별 합계
data2 <- read.csv('1-4호선승하차승객수.csv'); data2
View(data2)
View(data2)
attach(data2)
tapply(승차, 노선번호, sum) #노선 번호별 승차인원수 합계
tapply(하차, 노선번호, sum) #노선번호별 하차 인원수 합계
apply(data2[,c(3,4)],2,sum) #노선 번호 상관없이 승차 하차 인원수 합계
sapply(data2[,c(3,4)], sum) #노선 번호 상관없이 승차 하차 인원수 합계
aggregate(승차+하차~노선번호,data2,sum) #노선 번호별 승하차 인원수 합계
aggregate(승차~노선번호,data2,sum) #노선 번호별 승차 인원수 합계
aggregate(하차~노선번호,data2,sum) #노선 번호별 하차 인원수 합계
# Function
mat1 <- matrix(c(1:6),nrow = 2,byrow = T); mat1
# Function
mat1 <- matrix(c(1:5),nrow = 2,byrow = T); mat1
# Function
mat1 <- matrix(c(1:6),nrow = ,byrow = T); mat1
# Function
mat1 <- matrix(c(1:6),nrow =3 ,byrow = T); mat1
# Function
mat1 <- matrix(c(1:6),nrow = 2 ,byrow = T); mat1
# Function
mat1 <- matrix(c(1:6), nrow = 2 ,byrow = T); mat1
# Function
mat1 <- matrix(c(1:6),nrow = 2 ,byrow = T); mat1
a <- rep(1,3)
sweep(mat1,2,a)
b <- matrix(c(2,2))
b
sweep(mat1,1,b)
mat1
a <- c(1,2,3,4,5); length(a)
length(mat1)
library(googleVis)
length(Fruits)
Fruits
myfunct()
myfunct <- function() {
return(10)
}
myfunct()
myfunct2 <- function(x) {
y = x * x;
return(y)
}
myfunct2(-3)
func_test1 <- function(a,b){
c = a - b
return(abs(c))
}
func_test1(2,4)
library(googleVis)
sort1 <- Fruits$Sales
sort1
aaa <- Fruits
View(aaa)
View(aaa)
sort(sort1) #오름차순
sort(sort1, decreasing = T) #내림차순
install.packages("plyr")
library(plyr)
fruits <- read.csv('fruits_10.csv', header = T)
fruits
View(fruits)
View(fruits)
ddply(fruits, 'name', summarise, sum_qty=sum(qty), sum_price=sum(price))
ddply(fruits, c('year','name'), summarise, max_qty=max(qty), min_price=min(price))
ddply(fruits, 'name', transform, sum_qty=sum(qty), pct_qty=(100*qty)/sum(qty))
install.packages('dplyr')
library(dplyr)
data1 <- read.csv('2013년_프로야구선수_성적.csv')
data1
View(data1)
View(data1)
data2 <- filter(data1, 경기 >= 120)
data2
data3 <- filter(data1, 경기 >= 120 & 득점 >= 80)
data3
data4 <- filter(data1, 포지션 == '1루수' | 포지션=='3루수')
data4
data4 <- filter(data1, 포지션 %in% c('1루수', '3루수'))
data4
data4 <- filter(data1, 포지션 == '1루수' | 포지션=='3루수')
data4
data4 <- filter(data1, 포지션 %in% c('1루수', '3루수'))
data4
select(data1, 선수명, 포지션, 팀)
select(data1,순위:타수)
select(data1,-홈런,-타점,-도루)
select(data1,-홈런:-도루)
data1 %>%
select(선수명,팀, 경기, 타수) %>%
filter(타수 > 400)
data1 %>%
select(선수명,팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(타수)
data1 %>%
select(선수명,팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(desc(타수))
data1 %>%
select(선수명,팀, 경기, 타수) %>%
filter(타수 > 400) %>%
arrange(desc(경기),desc(타수))
data1 %>%
select(선수명, 팀, 경기, 타수) %>%
mutate(경기x타수 = 경기*타수) %>%
arrange(경기x타수)
data1 %>%
select(선수명, 팀, 출루율, 장타율) %>%
mutate(OPS = 출루율+장타율) %>%
arrange(desc(OPS))
data2 <- data1 %>%
select(선수명, 팀, 출루율, 장타율) %>%
mutate(OPS = 출루율+장타율) %>%
arrange(desc(OPS))
data1 %>%
group_by(팀) %>%
summarise(average = mean(경기, na.rm = T))
data1 %>%
group_by(팀) %>%
summarise_each(funs(mean), 경기, 타수) # funs deprecated
data1 %>%
group_by(팀) %>%
summarise_each(list(mean), 경기, 타수)
Fruits
View(aaa)
View(aaa)
Fruits %>%
filter(Expenses > 80)
Fruits1 <- filter(Fruits, Expenses > 80); Fruits1
Fruits %>%
filter(Expenses > 90 & Sales > 90)
Fruits %>%
filter(Expenses > 90 | Sales > 80)
Fruits %>%
filter(Expenses %in% c(79,  91))
Fruits %>%
select(Fruit, Year, Sales)
Fruits %>%
group_by(Fruit) %>%
summarise(average = sum(Sales, na.rm = T))
Fruits %>%
group_by(Fruit) %>%
summarise_each(list(sum), Sales, Profit)
install.packages('reshape2')
library("reshape2")
fruits
View(fruits)
View(fruits)
melt(Fruits, id='Year')
melt(fruits, id='Year')
melt(fruits, id='year')
melt(fruits, id=c('year', 'name'))
melt(fruits, id='year')
melt(fruits, id=c('year', 'name'))
install.packages('stringr')
install.packages("stringr")
library(stringr)
fruits <- c('apple', 'Apple', 'banana', 'pineapple')
str_detect(fruits, 'A')
str_detect(fruits, 'a')
str_detect(fruits, '^a') # ^:단어의 처음, $:단어의 끝
str_detect(fruits, 'e$')
str_detect(fruits, '^[aA]')
str_detect(fruits, '[aA]')
str_detect(fruits, regex('a', ignore_case = T))
fruits
str_count(fruits, 'a')
str_c("apple","banana")
str_c("fruits:", fruits)
str_c(fruits, " name is ", fruits)
str_c(fruits, collapse="")
str_c(fruits, collapse=",")
str_c(fruits, collapse=", ")
str_dup(fruits,3)
str_locate(fruits, 'a')
fruits
str_length('과일') # 한글자 1로 인식하여 편리함
str_locate('apple', 'a')
str_locate(fruits, 'a')
str_locate('apple', 'app')
str_replace('apple','p','*')
str_replace('apple','p','++')
str_replace_all('apple','p','*')
fruits <- str_c('apple','/','orange','/','banana')
fruits
str_split(fruits, '/') ## list형으로 출력
str_sub(fruits, start=1, end=3)
str_sub(fruits, start=6, end=9)
str_sub(fruits, start=7)
str_sub(fruits, start=-5)
str_trim('\t apple banana berry \n') # \t or \n도 지워짐
